import passport from 'passport' // O Passport √© importado, mas as estrat√©gias n√£o s√£o configuradas aqui
import express from 'express';
import type { Request, Response } from 'express'; 
import * as fs from 'fs/promises';
import User from '../models/User.ts'; // Alterado para .js para consist√™ncia ESM
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';

// A l√≥gica de configura√ß√£o do Passport (estrategias, serialize/deserialize)
// foi removida daqui. A configura√ß√£o do Google j√° est√° correta em server.ts.

/**
 * Gera um JSON Web Token (JWT) para o ID de usu√°rio fornecido.
 * @param id O ID do usu√°rio (string).
 * @returns O token JWT assinado.
 * @throws {Error} Se JWT_SECRET n√£o estiver configurado.
 */
const generateToken = (id: string): string => {
  ¬† ¬† if(!process.env.JWT_SECRET) {
    ¬† ¬† ¬† ¬† throw new Error('JWT_SECRET must be configured');
    ¬† ¬† }
    ¬† ¬† return jwt.sign({ id }, process.env.JWT_SECRET as string,¬† {
      ¬† ¬† ¬† ¬† expiresIn: '30d',
      ¬† ¬† });
};
interface AuthenticatedRequest extends Request {
    user?: any;
}

export const getMe = async (req: AuthRequest, res: Response) => {
    // O ID do usu√°rio √© anexado √† requisi√ß√£o pelo middleware 'protect'
    const userId = req.userId;

    if (!userId) {
        // Isso n√£o deve acontecer se o middleware estiver funcionando, mas √© uma seguran√ßa.
        return res.status(401).json({ message: 'N√£o autorizado, ID do usu√°rio ausente.' });
    }
async function fetchProtectedData() {
    const token = localStorage.getItem('userToken');

    if (!token) {
        throw new Error("Usu√°rio n√£o logado");
    }

    const response = await fetch('/api/media', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}` // <--- ENVIA O TOKEN AQUI
        },
        // N√£o use 'credentials: include' junto com o JWT, a menos que voc√™ tamb√©m precise de cookies.
    });
    // ...
}
    try {
        // Busca o usu√°rio pelo ID, mas exclui a senha
        const user = await User.findById(userId).select('-password');

        if (user) {
            // ‚úÖ CORRETO: Retorna os dados do usu√°rio no formato esperado pelo frontend
            return res.status(200).json({
                message: 'Dados do usu√°rio recuperados com sucesso.',
                user: {
                    id: user._id,
                    username: user.username,
                    email: user.email,
                    // Inclua quaisquer outros campos que voc√™ precise (ex: avatar, name)
                }
            });
        } else {
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado.' });
        }
    } catch (error) {
        console.error('Erro ao buscar dados do usu√°rio /me:', error);
        return res.status(500).json({ message: 'Erro no servidor ao buscar dados do usu√°rio.' });
    }
};
/**
 * Lida com o registro de novos usu√°rios com credenciais de email/senha.
 */
const saltRounds = 10;

export const registerUser = async(req: Request, res: Response) => {
  const { username, email, password, profileImage } = req.body;
  const avatarPath = req.file ? (req.file as Express.Multer.File).path : null;
 console.log("Dados recebidos para registro:", req.body); 
  if(!username || !email || !password) {
    // ... (c√≥digo para deletar avatar e erro 400)
    if (avatarPath) {
      await fs.unlink(avatarPath).catch(err => console.error("Falha ao deletar avatar", err))
      // const fs = await import('fs/promises');
      // await fs.unlink(avatarPath).catch(err => console.error("Falha ao deletar avatar", err));
    }
    return res.status(400).json({message: 'Todos os campos s√£o obrigat√≥rios (username, email, password).'});
  }

  try {
    // Verifica se o usu√°rio j√° existe pelo email
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      if( avatarPath ) {
        await fs.unlink(avatarPath).catch(err => console.error("Falha ao deletar avatar por duplicidade", err)) 
      }
      return res.status(409).json({ message: 'Este email j√° est√° em uso.' });
    }

    // 1. GERA O HASH
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // 2. CRIA O NOVO USU√ÅRIO USANDO O HASH
    const newUser = new User({ 
      username, 
      email, 
      password: hashedPassword, // <-- CORRE√á√ÉO: Usar o HASH
      // avatarUrl: avatarPath,
      profileImage: profileImage,
    });

    await newUser.save();
    //üõë NOVO PASSO: GERAR O TOKEN
    const token = generateToken(newUser._id.toString());
    // ... (c√≥digo para retorno 201)
    return res.status(201).json({
      message: 'Usu√°rio registrado com sucesso!',
      token: token,
      user: {
        id: newUser._id, // Usar _id do Mongoose
        username: newUser.username,
        password: hashedPassword,
        email: newUser.email,
        profileImage: newUser.profileImage
        
      },
    });       
    ¬†}catch(error: any) {
      ¬† // 11000 √© o c√≥digo para duplicidade no MongoDB (email ou username √∫nico)
      if (avatarPath) {
        // const fs = await import('fs/promises');
        await fs.unlink(avatarPath).catch(err => console.error("Falha ao deletar avatar ap√≥s erro", err));
      }
      ¬†if(error.code === 11000) {
        return res.status(409).json({message: 'Email ou nome de usu√°rio j√° est√° em uso.'});
      }
      console.error("Erro no registro:", error);
      return res.status(500).json({message:'Erro ao registrar usu√°rio.', error: error.message })
    }
};

/**
 * Lida com o login de usu√°rios com credenciais de email/senha.
 */
export const loginUser = async (req: Request, res: Response) => {
    // const token = generateToken(user._id.toString());
    // Apenas email e password s√£o necess√°rios para o login
    const { email, password } = req.body; 

    // Valida√ß√£o b√°sica
    if (!email || !password) {
        return res.status(400).json({ message: 'Email e senha s√£o obrigat√≥rios.' });
    }

    try {
        // 1. Encontra o usu√°rio pelo email
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(401).json({ message: 'Credenciais inv√°lidas: Email ou senha incorretos.' });
        }

        // 2. Compara a senha (garantindo que 'user.password' exista)
        const passwordMatches = user.password && (await bcrypt.compare(password, user.password)); 

        if (passwordMatches) {
            const token = generateToken(user._id.toString());

            // 3. RETORNA O TOKEN E OS DADOS DO USU√ÅRIO SEPARADAMENTE (CORRE√á√ÉO APLICADA AQUI)
            return res.status(200).json({
                message: 'Login bem-sucedido!',
                token: token, // ‚úÖ CORRE√á√ÉO: Token no n√≠vel superior
                user: {
                    id: user._id,
                    username: user.username,
                    email: user.email,
                    profileImage: user.profileImage,
                    // Inclua quaisquer outros dados que o frontend precise (avatarUrl, etc.)
                }
            });
        } else {
            // Se a senha n√£o corresponder
            return res.status(401).json({ message: 'Credenciais inv√°lidas: Email ou senha incorretos.' });
        }
    } catch (error: any) {
        console.error('Error no Login:', error);
        return res.status(500).json({ message: 'Erro no servidor durante o login.', error: error.message });
    }
};
