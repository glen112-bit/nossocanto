
// üõë BLOCO DE CARREGAMENTO CR√çTICO (DEVE SER O PRIMEIRO) üõë
import dotenv from 'dotenv';
import path from 'path';¬†
import { fileURLToPath } from 'url';
// ... (restante do bloco dotenv) ...
// ------------------------------------------------------------

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const envResult = dotenv.config({ // Capturamos el resultado para debug
    ¬† ¬† path: path.join(__dirname, '..', '.env')
})

// --- IN√çCIO DO DEBUGGING: VERIFICAR VARI√ÅVEL SECRETA ---
if (envResult.error) {
    console.error('‚ùå ERRO AO CARREGAR .env:', envResult.error.message);
} else {
    // Verificamos se o JWT_SECRET foi carregado com sucesso
    if (process.env.JWT_SECRET) {
        console.log('‚úÖ JWT_SECRET CARREGADO com sucesso. (Primeiros 5 caracteres):', process.env.JWT_SECRET.substring(0, 5) + '...');
    } else {
        console.error('‚ö†Ô∏è ATEN√á√ÉO: JWT_SECRET N√ÉO FOI ENCONTRADO em process.env, verifique seu arquivo .env.');
    }
}
// --- AGORA, E SOMENTE AGORA, fazemos as importa√ß√µes restantes ---
import express from 'express';¬†
import type { Express, Request, Response } from 'express';
import cors from 'cors';
import expressSession from 'express-session';¬†

import passport from 'passport';
import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
import connectDB from '../config/db.js';

// üö® CORRE√á√ÉO CR√çTICA: Mudar .ts para .js nos imports relativos para NodeNext/ESM
import mediaRouter from '../routes/mediaRoutes.ts'; 
import commentRouter from '../routes/commentRoutes.ts';
import authRouter from '../routes/authRoutes.ts'; 
import User from '../models/User.ts'; // ‚úÖ CORRIGIDO: Deve ser .js// --- 1. CONFIGURA√á√ÉO INICIAL ---
const app: Express = express();
const PORT: number = parseInt(process.env.PORT || '3000', 10);

// Define a URL do frontend a partir do .env
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:5173';

dotenv.config({
    path: path.join(__dirname, '..', '.env')
})
// --- 2. MIDDLEWARE ---
app.use(cors({
    ¬† origin: FRONTEND_URL, // Usa a vari√°vel do .env
    ¬† methods: ['GET,HEAD,PUT,PATCH,POST,DELETE'],

    ¬† credentials: true,
}));¬†
app.use(express.json());¬†
app.use(express.urlencoded({ extended: true })); 

// Servir archivos est√°ticos (uploads)s
// app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
const UPLOADS_ROOT_DIR_SERVER = path.join(__dirname, '..', 'uploads');
const UPLOADS_ROOT_DIR = path.join(__dirname, '..', '../uploads'); // Ajuste o n√≠vel se necess√°rio
app.use('/uploads', express.static(UPLOADS_ROOT_DIR));
// app.use('/uploads', express.static(path.join(process.cwd(), '../uploads')));

// --- 3. CONFIGURA√á√ÉO E MIDDLEWARE DO PASSPORT (Sess√µes) ---

// Sess√£o Express: Passport usa sess√µes para manter o estado de autentica√ß√£o
app.use(expressSession({
    ¬† ¬† secret: process.env.SESSION_SECRET || 'fallback_secret_key', // Usa chave do .env
    ¬† ¬† resave: false,
    ¬† ¬† saveUninitialized: false,
    ¬† ¬† cookie: {¬†
        ¬† ¬† ¬† ¬† maxAge: 24 * 60 * 60 * 1000, // 1 dia
        ¬† ¬† ¬† ¬† secure: process.env.NODE_ENV === 'production', // Usa 'true' em produ√ß√£o (HTTPS)
        ¬† ¬† ¬† ¬† sameSite: 'lax', // Permite que o cookie seja enviado em requisi√ß√µes OAuth
        ¬† ¬† },
}));

// Inicializa o Passport e as sess√µes
app.use(passport.initialize());
app.use(passport.session());


// --- 4. CONFIGURA√á√ÉO DA ESTRAT√âGIA DO GOOGLE ---

// Serializa√ß√£o: Armazena apenas o ID do MongoDB na sess√£o
passport.serializeUser(async (id: string, done) => {
    ¬† ¬† // ‚úÖ CORRIGIDO: Deve usar o ID interno do Mongoose (_id)
    try{
        const user = await User.findById(id).select('-password')
        // ¬† ¬† done(null, user._id);¬†
        done(null, user)
    }catch (error) {
        done(error, null)
    }
});

// Desserializa√ß√£o: Busca o usu√°rio completo no MongoDB a partir do ID da sess√£o
passport.deserializeUser(async (id: string, done) => {
    ¬† ¬† try {
        ¬† ¬† ¬† ¬† // ‚úÖ IMPLEMENTA√á√ÉO REAL: Buscar o usu√°rio no MongoDB pelo ID
        ¬† ¬† ¬† ¬† const user = await User.findById(id);¬†
        ¬† ¬† ¬† ¬† done(null, user);
        ¬† ¬† } catch (err) {
            ¬† ¬† ¬† ¬† done(err, null);
            ¬† ¬† }
});


// Configura a estrat√©gia do Google
passport.use(new GoogleStrategy({
    ¬† ¬† clientID: process.env.GOOGLE_CLIENT_ID!,
    ¬† ¬† clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    ¬† ¬† callbackURL: process.env.GOOGLE_CALLBACK_URL || "http://localhost:3000/auth/google/callback",
},
async (accessToken, refreshToken, profile, done) => {
    ¬† ¬† try {
        ¬† ¬† ¬† ¬† // ‚úÖ L√ìGICA COMPLETA DE USU√ÅRIO: Buscar ou Criar (Upsert)

        // 1. Tenta encontrar o usu√°rio pelo Google ID
        let user = await User.findOne({ googleId: profile.id });

        if (user) {
            // Se o usu√°rio existir, autentica
            return done(null, user);
        } else {
            // Se o usu√°rio N√ÉO existir, cria um novo
            const email = profile.emails?.[0].value;

            if (!email) {
                return done(new Error('Email n√£o fornecido pelo Google'), undefined);
            }

            const newUser = await User.create({
                googleId: profile.id, // Armazenamos o ID do Google
                name: profile.displayName,
                email: email,
                profileImageUrl: profile.photos?.[0].value,
            });

            return done(null, newUser);
        }

    } catch (err) {
        done(err as Error);
    }
}));

// --- 5. INICIO DE LA APLICACI√ìN ---
const startServer = async () => {
const HOST = '0.0.0.0';
    ¬† ¬† try {
        // üõë Llama a la funci√≥n de conexi√≥n a la base de datos
        await connectDB();¬†

        // --- 6. ROTAS PRINCIPAIS E DE AUTENTICA√á√ÉO ---
        app.get('/', (req: Request, res: Response) => {
            res.send('Backend Server est√° funcionando!');
        });
        ¬† ¬† 
        // ‚úÖ Montar Roteadores
        app.use('/api/auth', authRouter);¬†
        app.use('/api/media', mediaRouter);¬†
        app.use('/api/comment', commentRouter);¬† ¬† ¬† ¬† ¬†

        // ROTA 1: Inicia o fluxo de autentica√ß√£o do Google
        app.get('/auth/google',
                passport.authenticate('google', {¬†
                                      scope: ['profile', 'email']
                })
                ¬† );

                ¬† ¬† // ROTA 2: Rota de callback ap√≥s o Google autenticar
                app.get('/auth/google/callback',
                        passport.authenticate('google', {¬†
                                              // ‚úÖ CORRIGIDO: Usa a URL completa do frontend para redirecionamento
                                              failureRedirect: `${FRONTEND_URL}/#/login` 
                        }),
                        // Redireciona em caso de sucesso
                        (req: Request, res: Response) => {
                            ¬† ¬† // Redireciona para a p√°gina principal do frontend
                            res.redirect(`${FRONTEND_URL}/#/`);
                        }
                       );¬† ¬† ¬† ¬† 

                       // Iniciar el servidor Express S√ì ap√≥s a conex√£o bem-sucedida
                       app.listen(PORT, () => {
                           console.log(`üöÄ Servidor Express rodando na porta: http://localhost:${PORT}:${PORT}`);
                       });
    } catch (error) {
        console.error('‚ùå Fallo al iniciar la aplicaci√≥n:', error);
    }
};

// Ejecuta la funci√≥n de inicio
startServer();
