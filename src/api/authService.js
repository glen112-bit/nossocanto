import axios from 'axios';

// ðŸ›‘ Ajuste a URL base para o endereÃ§o da rota de AUTENTICAÃ‡ÃƒO do seu backend.
// Exemplo: Se o backend Ã© http://localhost:3000 e as rotas de auth estÃ£o em /api/auth
// const API_AUTH_URL = 'http://localhost:3000/api/auth';
const API_AUTH_URL = 'http://localhost:3000/auth'; 

// ðŸ’¡ Cliente Axios padrÃ£o para todas as requisiÃ§Ãµes autenticadas/nÃ£o-autenticadas
const apiClient = axios.create({
    headers: {
        'Content-Type': 'application/json',
    },
});

/**
 * Lida com a resposta da API, extraindo o JSON de erro se o status nÃ£o for OK.
 * @param {object} error - O objeto de erro do Axios.
 */
const handleAxiosError = (error) => {
    // Se a resposta existir, extraÃ­mos a mensagem de erro do backend
    if (error.response && error.response.data && error.response.data.message) {
        // LanÃ§a o erro com a mensagem fornecida pelo backend (ex: "UsuÃ¡rio jÃ¡ existe")
        throw new Error(error.response.data.message);
    } 
    // Se o erro nÃ£o for de resposta HTTP (ex: erro de rede/servidor offline)
    else if (error.request) {
        throw new Error('Erro de rede: O servidor nÃ£o respondeu ou estÃ¡ offline.');
    } 
    // Outros erros
    else {
        throw new Error('Ocorreu um erro desconhecido ao processar a requisiÃ§Ã£o.');
    }
};

// --- FunÃ§Ãµes de Gerenciamento de Token/SessÃ£o ---

/**
 * Armazena o token JWT no localStorage e o configura no cabeÃ§alho padrÃ£o do Axios.
 * @param {string} token - O token JWT.
 */
export const setAuthToken = (token) => {
    localStorage.setItem('authToken', token);
    // Configura o cabeÃ§alho para todas as requisiÃ§Ãµes futuras
    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`; 
};

/**
 * Remove o token do localStorage e do cabeÃ§alho do Axios (Logout).
 */
export const removeAuthToken = () => {
    localStorage.removeItem('authToken');
    delete apiClient.defaults.headers.common['Authorization'];
};

/**
 * Verifica se um token existe no localStorage e o configura no Axios ao iniciar o App.
 */
export const setupAxiosDefaults = () => {
    const token = localStorage.getItem('authToken');
    if (token) {
        setAuthToken(token);
    }
};

// ðŸ’¡ Chame isso uma vez no seu ponto de entrada (ex: App.jsx ou index.js)
setupAxiosDefaults();

// --- FunÃ§Ãµes da API ---

/**
 * ðŸ”‘ Envia dados para a rota de Registro (POST /auth/register).
 */
export const registerUser = async (username, email, password) => {
    try {
        // Usa `apiClient` para a requisiÃ§Ã£o
        const response = await apiClient.post(`${API_AUTH_URL}/register`, {
            username,
            email,
            password,
        });
        
        return response.data; 

    } catch (error) {
        handleAxiosError(error);
    }
};

/**
 * ðŸ”‘ Envia dados para a rota de Login (POST /auth/login) e inicia a sessÃ£o.
 * @param {string} email
 * @param {string} password
 * @returns {Promise<{token: string, user: object}>} O token JWT e os dados do usuÃ¡rio.
 */
export const loginUser = async (email, password) => {
    try {
        // ðŸ›‘ CORREÃ‡ÃƒO DE URL: Use o template literal ou garanta a barra (`/`)
        // const response = await apiClient.post(`${API_AUTH_URL}/login`, {
            const response = await axios.post(API_URL + 'login', { 
            email,
            password
        });
        
        const { token, user } = response.data; // Assume que o backend retorna token e user

        if (token) {
            // ðŸš€ AÃ‡ÃƒO CRUCIAL: Salva o token para iniciar a sessÃ£o
            setAuthToken(token);
        } else {
            // Se o login foi bem-sucedido, mas o backend nÃ£o retornou o token
            throw new Error('Login bem-sucedido, mas o token nÃ£o foi recebido. Verifique o backend.');
        }

        return response.data; 

    } catch (error) {
        // Aplica o tratamento de erro unificado
        handleAxiosError(error);
    }
};

export default apiClient;
